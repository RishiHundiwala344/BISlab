import random
import numpy as np

# Define the problem (TSP: Traveling Salesman Problem)
class TSP:
    def __init__(self, distance_matrix):
        self.distance_matrix = distance_matrix
        self.num_cities = len(distance_matrix)

    def get_distance(self, city1, city2):
        return self.distance_matrix[city1][city2]

    def get_all_cities(self):
        return range(self.num_cities)

# Ant Colony Optimization Algorithm
class AntColony:
    def __init__(self, tsp, num_ants, num_iterations, alpha, beta, evaporation_rate, Q):
        self.tsp = tsp
        self.num_ants = num_ants
        self.num_iterations = num_iterations
        self.alpha = alpha        # Influence of pheromone on decision
        self.beta = beta          # Influence of heuristic on decision
        self.evaporation_rate = evaporation_rate  # Pheromone evaporation rate
        self.Q = Q                # Pheromone intensity

        # Initialize pheromone levels: 1 on all edges
        self.pheromones = np.ones((tsp.num_cities, tsp.num_cities))

    def run(self):
        best_path = None
        best_distance = float('inf')
        
        for iteration in range(self.num_iterations):
            paths = self._construct_paths()
            self._update_pheromones(paths)
            
            # Find the best path in this iteration
            for path in paths:
                distance = self._calculate_path_distance(path)
                if distance < best_distance:
                    best_distance = distance
                    best_path = path

            print(f"Iteration {iteration + 1}/{self.num_iterations} - Best Distance: {best_distance}")

        return best_path, best_distance

    def _construct_paths(self):
        paths = []
        for _ in range(self.num_ants):
            path = self._construct_path()
            paths.append(path)
        return paths

    def _construct_path(self):
        path = [random.randint(0, self.tsp.num_cities - 1)]  # Start from a random city
        visited = set(path)
        
        while len(path) < self.tsp.num_cities:
            current_city = path[-1]
            next_city = self._select_next_city(current_city, visited)
            path.append(next_city)
            visited.add(next_city)
        
        return path

    def _select_next_city(self, current_city, visited):
        # Calculate the probabilities of each city
        probabilities = []
        for city in self.tsp.get_all_cities():
            if city not in visited:
                pheromone = self.pheromones[current_city][city] ** self.alpha
                distance = self.tsp.get_distance(current_city, city)
                heuristic = (1.0 / distance) ** self.beta
                probabilities.append(pheromone * heuristic)
            else:
                probabilities.append(0)
        
        # Normalize probabilities to sum to 1
        total_prob = sum(probabilities)
        probabilities = [p / total_prob for p in probabilities]
        
        # Select the next city based on probabilities
        return random.choices(list(self.tsp.get_all_cities()), probabilities)[0]

    def _update_pheromones(self, paths):
        # Evaporate pheromone
        self.pheromones *= (1 - self.evaporation_rate)
        
        # Deposit new pheromone from each ant's path
        for path in paths:
            path_distance = self._calculate_path_distance(path)
            pheromone_deposit = self.Q / path_distance
            for i in range(len(path) - 1):
                self.pheromones[path[i]][path[i + 1]] += pheromone_deposit
            self.pheromones[path[-1]][path[0]] += pheromone_deposit  # Returning to start

    def _calculate_path_distance(self, path):
        distance = 0
        for i in range(len(path) - 1):
            distance += self.tsp.get_distance(path[i], path[i + 1])
        distance += self.tsp.get_distance(path[-1], path[0])  # Returning to start
        return distance

# Example of a distance matrix for 5 cities
distance_matrix = [
    [0, 2, 9, 10, 5],
    [1, 0, 6, 4, 8],
    [15, 7, 0, 8, 3],
    [6, 3, 12, 0, 7],
    [10, 4, 8, 6, 0]
]

# Create TSP problem instance
tsp = TSP(distance_matrix)

# Create Ant Colony Optimization instance
aco = AntColony(
    tsp=tsp,
    num_ants=10,
    num_iterations=100,
    alpha=1.0,  # Pheromone importance
    beta=2.0,   # Heuristic importance
    evaporation_rate=0.1,
    Q=100
)

# Run the ACO algorithm
best_path, best_distance = aco.run()

# Output the results
print("Best Path:", best_path)
print("Best Distance:", best_distance)
