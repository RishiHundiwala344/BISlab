import numpy as np
import matplotlib.pyplot as plt

class Particle:
    def __init__(self, num_clusters, dimensions):
        # Initialize positions randomly within the data range
        self.position = np.random.rand(num_clusters, dimensions) * 10  # Assuming data range is 0-10
        self.velocity = np.random.rand(num_clusters, dimensions) * 2 - 1
        self.best_position = self.position.copy()
        self.best_value = float('inf')

def objective_function(data, cluster_centers):
    # Calculate the total distance (inertia) for K-means
    total_distance = 0
    for point in data:
        distances = np.linalg.norm(point - cluster_centers, axis=1)
        total_distance += np.min(distances)
    return total_distance

def pso_kmeans(data, num_clusters, num_particles, max_iterations):
    # Parameters
    w = 0.5
    c1 = 1.5
    c2 = 1.5

    swarm = [Particle(num_clusters, data.shape[1]) for _ in range(num_particles)]
    global_best_position = None
    global_best_value = float('inf')

    for iteration in range(max_iterations):
        for particle in swarm:
            # Evaluate fitness
            fitness_value = objective_function(data, particle.position)

            # Update personal best
            if fitness_value < particle.best_value:
                particle.best_value = fitness_value
                particle.best_position = particle.position.copy()

            # Update global best
            if fitness_value < global_best_value:
                global_best_value = fitness_value
                global_best_position = particle.position.copy()

        for particle in swarm:
            # Update velocity
            r1, r2 = np.random.rand(num_clusters, data.shape[1]), np.random.rand(num_clusters, data.shape[1])
            particle.velocity = (w * particle.velocity +
                                 c1 * r1 * (particle.best_position - particle.position) +
                                 c2 * r2 * (global_best_position - particle.position))

            # Update position
            particle.position += particle.velocity
            
            # Ensure the positions are within bounds
            particle.position = np.clip(particle.position, 0, 10)  # Assuming data range is 0-10

    return global_best_position

# Generate synthetic data
np.random.seed(42)
data = np.vstack([
    np.random.normal(loc=[2, 2], scale=0.5, size=(50, 2)),
    np.random.normal(loc=[8, 8], scale=0.5, size=(50, 2)),
    np.random.normal(loc=[5, 3], scale=0.5, size=(50, 2))
])

# Parameters
num_clusters = 3
num_particles = 30
max_iterations = 100

# Run PSO for K-means
best_centers = pso_kmeans(data, num_clusters, num_particles, max_iterations)

# Plotting
plt.scatter(data[:, 0], data[:, 1], color='lightgray')
plt.scatter(best_centers[:, 0], best_centers[:, 1], color='red', marker='x', s=200, label='Cluster Centers')
plt.title('PSO-based K-means Clustering')
plt.legend()
plt.show()
